#summary PatRec module description

= Pattern Recognition =

The pattern recognition module is organized in:

 * *Offline*: Training, validation and testing can be done using pre-recorded data.

 * *Realtime*: Needs the trained algorithm from the offline step in order to test it with real-time recordings.

For quick user instructions see [BioPatRec_StartupGuide], or more detailed information in [GUI_PatRec]. For a general overview of the functions involved see [BioPatRec_Roadmap].

== Algorithms ==
 * Signal Processing
  * [ICA] Independent Component Analysis

 * Feature selection
  * [PCA] Principal Component Analysis

 * Pattern Recognition
  * [Discriminant_Analysis DA] Discriminant Analysis 
  * [KNN] k-Nearest Neighbor Semi
  * [MLP] Multi-layers Perceptron
  * [RFN] Regulatory Feedback Networks
  * [SOM] Self-Organizing Map
  * [SSOM] Supervised Self-Organizing Map


== Offline !PatRec == 

Most of the training phase is taking care by the function _OfflinePatRec_, which requires the variable [sigFeatures].

 * *Creation of a matrix of feature vectors.* The first step is to extract the training and validation sets (see [xSets]). This directly affects the information to be used during the training and testing of the classifier. The [xSets] can be formed in different ways according to the _"Select Movements Mix"_ pop menu.
  * _All Mov_. This means that all the movements recorded will be used as independent movements, regardless if they are individual or mixed movements.
   * # Outputs = # Movements.
  * _Individual Mov_. This option will only consider the individual movements during the training phase. All movements will be considered in the testing phase. 
   * # Outputs = # Individual movements.
  * _Mixed Out_. This means that the mixed classes (or simultaneous movements) will also be used during the training phase.
   * # Outputs = # Individual movements. 
  NOTE: Only _"All Mov"_ is available in [BioPatRec_Highlights#BioPatRec_ETT BioPatRec ETT]. The other options relate to simultaneous control which is available from [BioPatRec_Highlights#BioPatRec_TVÅ BioPatRec TVÅ].

 * *[Normalization]*. The training and validation sets are normalized according to the selected option. 

 * *Creation of the classifier topology.* The same classifier can be constructed in different topologies, such as One-Vs-All, One-Vs-One, etc... see [PatRec_Topologies] for details.
 NOTE: Only the _single classifier_ topology is available in [BioPatRec_Highlights#BioPatRec_ETT BioPatRec ETT]. The other options relate to simultaneous control which is available from [BioPatRec_Highlights#BioPatRec_TVÅ BioPatRec TVÅ].

 * *Training of the classifier.* The OfflinePatRec function calls OfflinePatRecTraining to proceed with the classifier(s) training. The function OfflinePatRec returns the [patRec] structure containing all information required for further utilization of the classifier(s).

 * *Testing of the classifier.* A common function to all classifiers is used to evaluate the accuracy of the selected pattern recognition strategy (Accuracy_patRec). These function uses the testing sets with unseen feature vectors for the classifier(s). Therefore it requires independent functions for
  * Normalization of a single an unseen feature vector (NormalizeSet) with the parameters created during the normalization of the training set. 
  * Classification of a single feature vector with the classifier previously trained. This function is the classifier test routine and is called from OneShotPatRec, see below for the implementation of a new classifier.

 This framework allows the computation of the offline accuracy with the same routines later used for the Real-time classification. Therefore, if the implementation of a given classifier works offline, it will be work in real-time!

Automatic statistics can be generated using the menu _Statistics_, see [PatRec_Statistics] for details.

== Real-time !PatRec == 

The Real-time pattern recognition requires a trained classifier in the structure [patRec]. The classifier will be tested with continuously recorded data.

 * Real-time !PatRec (button)
  * Calls RealtimePatRec
  * Uses [patRec] and the GUI handles.
  * Returns the predicted movements to the GUI and the average processing time.

The real-time predictions can be couple with a prosthetic device or the virtual reality environment. see [GUI_TestPatRec] for operation.

The following tests of prediction and control performance can be used:

 * [Motion_Test Motion test]
  * Calls MotionTest
  * Uses [patRec] and the GUI handles.
  * Returns ...

 * [TAC_Test Target Achievement Control (TAC) Test]

NOTE: To do any real-time testing you must have configured your DAQ card, see [BioPatRec_StartupGuide].

= Adding a New !PatRec Algorithm =

Create all the related functions (files) inside a new folder with a clear name for your new algorithm. This folder must be inside !PatRec folder.

You will normally need at least 2 functions

 * One for *training* your algorithm
  * Your training function must take as input the [xSets] and returns the required information for further evaluation. 
  * See OfflinePatRecTraining for examples of how other PatRec algorithms are called.

 * One for *testing* your trained algorithm
  * This function must receive a single feature vector and returns the predicted class or movement in _outMov_, and a vector with the probability of prediction for each class in _outVector_.
  * See OneShotPatRec for examples of how other PatRec algorithms are called.

You will have to modify the following routines:

 * {{{GUI_PatRec}}} (To add you algorithm in the GUI)
  * pm_SelectAlgorithm (in {{{GUI_PatRec.fig}}})
  * pm_SelectTraining (in {{{GUI_PatRec.m}}})
 * OfflinePatRecTraining (for training)
 * OneShotPatRec (for testing)

Take a look at OfflinePatRec to deeply understand how data is processed before reaching the PatRec algorithms in the OfflinePatRecTraining function. See [BioPatRec_Roadmap] for a general overview.