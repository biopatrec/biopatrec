#summary One-sentence summary of this page.

= Introduction =

_Self-Organizing Map_ is a kind of artificial neural network. These network are based on competitive learning; the output neurons of the network compete among themselves to be fired. The only _one_ neuron will be fired and that neuron called _winning neuron_. 
In Self-Organizing Map, the neurons are placed at the nodes of a lattice that is usually one or two dimensional, the higher dimensional are also possible but not as common.
The principal goal of the Self-Organizing Map (SOM) is to transform the high dimension (arbitrary dimension) input data into one or two dimensional discrete map.

SOM is consist an input layer and output layer. Each neuron in the lattice is fully connected to the input layer. This network represents a feedforward structure with a single computational layer consisting of neurons arranged in rows and columns. 
  

= Algorithm =

The algorithm is summarized as follows:

  # *Initialization:* Randomly choosing the initial weight vectors Wj(0).The only restriction is that Wj(0) to be different for j=1,2,...,l where l is the number of neurons in the lattice.
  # *Sampling:* Draw randomly the input vector x from the input data sets.
  # *Simmilarity matching:* Find the best-matching(winning) neuron i(x) at time-step _n_ by using the minimum-distance criterion where
        i(x)=arg min || x(_n_) - wj | , j=1,2,...,l
  # *Updating:* Adjust the synaptic-weight vector of all excited neurons by using the update formula *wj(_n_+1)=wj(_n_) + _eta_ _hj(_n_) ( x(_n_) - w(_n_))* where _eta_ is a learning rate parameter and hj(_n_) is the neighborhood function centered around the winning neuron x(i); both _eta_ and hj(_n_)are varied dynamically during learning best results.
  # *Continuation:* Continue with step 2 for some for some iteration.

Then after the training completed the next step is to find for each input data set the winning neuron according to step 2 and depending on the wj(0) j=1,2...,l
and keeping index of the winning neurons for all input data set in one vector that called the _Code Book_ .  

The classification will be done by comparing the winning neuron for testing data set according  to the code Book .  



= Functions Roadmap =
==Training==

examples of MLP:
 * {{{SOM_Maping}}}
  * Run training algorithms
   
  * {{{TestSOM}}}
   * {{{FindBUM}}}

== Testing ==


 * {{{TestSOM}}}
   * {{{FindBUM}}}